"""File generator for dbt project files."""

import os
from typing import List, Dict, Any
import yaml

from cartridge.ai.base import GeneratedModel, GeneratedTest
from cartridge.core.logging import get_logger

logger = get_logger(__name__)


class DBTFileGenerator:
    """Generator for individual dbt files."""
    
    def __init__(self):
        """Initialize file generator."""
        self.logger = get_logger(__name__)
    
    def generate_model_file(self, model: GeneratedModel, output_dir: str) -> str:
        """Generate a SQL file for a dbt model."""
        
        file_path = os.path.join(output_dir, f"{model.name}.sql")
        
        # Create model file with header comment and SQL
        content = self._generate_model_header(model)
        content += "\n" + model.sql
        
        # Ensure the SQL ends with a newline
        if not content.endswith('\n'):
            content += '\n'
        
        with open(file_path, 'w') as f:
            f.write(content)
        
        self.logger.debug(f"Generated model file: {file_path}")
        return file_path
    
    def generate_schema_file(self, models: List[GeneratedModel], output_dir: str, filename: str = "schema.yml") -> str:
        """Generate a schema.yml file with model documentation and tests."""
        
        file_path = os.path.join(output_dir, filename)
        
        # Build schema configuration
        schema_config = {
            "version": 2,
            "models": []
        }
        
        for model in models:
            model_config = {
                "name": model.name,
                "description": model.description
            }
            
            # Add column documentation
            if model.columns:
                model_config["columns"] = []
                for col in model.columns:
                    col_config = {
                        "name": col["name"],
                        "description": col["description"]
                    }
                    
                    # Add data type if available
                    if "data_type" in col:
                        col_config["data_type"] = col["data_type"]
                    
                    # Add column tests
                    if "tests" in col and col["tests"]:
                        col_config["tests"] = col["tests"]
                    
                    model_config["columns"].append(col_config)
            
            # Add model-level tests
            if model.tests:
                model_config["tests"] = self._format_tests_for_schema(model.tests)
            
            # Add tags
            if model.tags:
                model_config["tags"] = model.tags
            
            # Add meta information
            if model.meta:
                model_config["meta"] = model.meta
            
            schema_config["models"].append(model_config)
        
        # Write schema file
        with open(file_path, 'w') as f:
            yaml.dump(schema_config, f, default_flow_style=False, sort_keys=False, indent=2)
        
        self.logger.debug(f"Generated schema file: {file_path}")
        return file_path
    
    def generate_macro_file(self, macro_name: str, macro_content: str, output_dir: str) -> str:
        """Generate a macro SQL file."""
        
        file_path = os.path.join(output_dir, f"{macro_name}.sql")
        
        with open(file_path, 'w') as f:
            f.write(macro_content)
        
        self.logger.debug(f"Generated macro file: {file_path}")
        return file_path
    
    def generate_test_file(self, test_name: str, test_sql: str, output_dir: str) -> str:
        """Generate a custom test SQL file."""
        
        file_path = os.path.join(output_dir, f"{test_name}.sql")
        
        # Add test header
        content = f"-- Custom test: {test_name}\n\n"
        content += test_sql
        
        if not content.endswith('\n'):
            content += '\n'
        
        with open(file_path, 'w') as f:
            f.write(content)
        
        self.logger.debug(f"Generated test file: {file_path}")
        return file_path
    
    def generate_analysis_file(self, analysis_name: str, analysis_sql: str, output_dir: str) -> str:
        """Generate an analysis SQL file."""
        
        file_path = os.path.join(output_dir, f"{analysis_name}.sql")
        
        # Add analysis header
        content = f"-- Analysis: {analysis_name}\n"
        content += f"-- Generated by Cartridge\n\n"
        content += analysis_sql
        
        if not content.endswith('\n'):
            content += '\n'
        
        with open(file_path, 'w') as f:
            f.write(content)
        
        self.logger.debug(f"Generated analysis file: {file_path}")
        return file_path
    
    def _generate_model_header(self, model: GeneratedModel) -> str:
        """Generate header comment for model file."""
        
        header_lines = [
            f"-- Model: {model.name}",
            f"-- Type: {model.model_type.value}",
            f"-- Description: {model.description}",
            f"-- Materialization: {model.materialization}"
        ]
        
        if model.dependencies:
            header_lines.append(f"-- Dependencies: {', '.join(model.dependencies)}")
        
        if model.tags:
            header_lines.append(f"-- Tags: {', '.join(model.tags)}")
        
        header_lines.extend([
            "-- Generated by Cartridge",
            ""
        ])
        
        # Add configuration block if needed
        config_lines = []
        
        if model.materialization != "table":  # table is default
            config_lines.append(f"    materialized='{model.materialization}'")
        
        if model.tags:
            tags_str = "[" + ", ".join([f"'{tag}'" for tag in model.tags]) + "]"
            config_lines.append(f"    tags={tags_str}")
        
        if config_lines:
            header_lines.extend([
                "{{",
                "    config(",
                "        " + ",\n        ".join(config_lines),
                "    )",
                "}}"
            ])
        
        return "\n".join(header_lines)
    
    def _format_tests_for_schema(self, tests: List[GeneratedTest]) -> List[Dict[str, Any]]:
        """Format tests for schema.yml format."""
        
        formatted_tests = []
        
        for test in tests:
            if test.config:
                # Test with configuration
                test_config = {test.test_type: test.config}
                formatted_tests.append(test_config)
            else:
                # Simple test
                formatted_tests.append(test.test_type)
        
        return formatted_tests