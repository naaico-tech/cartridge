"""Templates for dbt project components."""

from typing import Dict, List, Any
from cartridge.ai.base import GeneratedModel, ModelGenerationResult


class DBTTemplates:
    """Template generator for dbt project components."""
    
    def get_utility_macros(self) -> Dict[str, str]:
        """Get utility macro templates."""
        
        macros = {
            "generate_schema_name": '''
-- Macro to generate schema names based on target
{% macro generate_schema_name(custom_schema_name, node) -%}

    {%- set default_schema = target.schema -%}
    {%- if custom_schema_name is none -%}

        {{ default_schema }}

    {%- else -%}

        {{ default_schema }}_{{ custom_schema_name | trim }}

    {%- endif -%}

{%- endmacro %}
'''.strip(),
            
            "get_custom_alias": '''
-- Macro to generate table aliases
{% macro generate_alias_name(custom_alias_name, node) -%}

    {%- if custom_alias_name is none -%}

        {{ node.name }}

    {%- else -%}

        {{ custom_alias_name | trim }}

    {%- endif -%}

{%- endmacro %}
'''.strip(),
            
            "safe_divide": '''
-- Macro for safe division (avoiding division by zero)
{% macro safe_divide(numerator, denominator) %}
    case 
        when {{ denominator }} = 0 then null
        else {{ numerator }} / {{ denominator }}
    end
{% endmacro %}
'''.strip(),
            
            "cents_to_dollars": '''
-- Macro to convert cents to dollars
{% macro cents_to_dollars(column_name, precision=2) %}
    round({{ column_name }} / 100.0, {{ precision }})
{% endmacro %}
'''.strip(),
            
            "generate_surrogate_key": '''
-- Macro to generate surrogate keys (if dbt_utils not available)
{% macro generate_surrogate_key(field_list) %}
    {% if dbt_utils.get_surrogate_key is defined %}
        {{ dbt_utils.surrogate_key(field_list) }}
    {% else %}
        md5(concat(
            {%- for field in field_list -%}
                coalesce(cast({{ field }} as varchar), '')
                {%- if not loop.last -%},{%- endif -%}
            {%- endfor -%}
        ))
    {% endif %}
{% endmacro %}
'''.strip()
        }
        
        return macros
    
    def get_analysis_templates(self, models: List[GeneratedModel]) -> Dict[str, str]:
        """Get analysis query templates."""
        
        analyses = {}
        
        # Model row counts analysis
        if models:
            model_refs = [f"ref('{model.name}')" for model in models]
            
            analyses["model_row_counts"] = f'''
-- Analysis: Row counts for all models
-- This query shows the row count for each model to help with data validation

select 'Summary' as analysis_type, count(*) as total_models
from (
    {" union all ".join([f"select '{model.name}' as model_name, count(*) as row_count from {{{{ {ref} }}}}" for model, ref in zip(models, model_refs)])}
) model_counts

union all

{" union all ".join([f"select '{model.name}' as model_name, count(*) as row_count from {{{{ {ref} }}}}" for model, ref in zip(models, model_refs)])}

order by 
    case when analysis_type = 'Summary' then 0 else 1 end,
    model_name
'''.strip()
        
        # Data freshness analysis
        analyses["data_freshness"] = '''
-- Analysis: Data freshness check
-- This query helps identify when data was last updated

with freshness_check as (
    select 
        'staging_models' as model_type,
        max(updated_at) as last_updated
    from {{ ref('stg_example') }}  -- Replace with actual staging model
    where updated_at is not null
    
    -- Add more unions for other model types as needed
)

select 
    model_type,
    last_updated,
    current_timestamp as analysis_run_time,
    extract(epoch from (current_timestamp - last_updated))/3600 as hours_since_update
from freshness_check
order by last_updated desc
'''.strip()
        
        # Data quality summary
        analyses["data_quality_summary"] = '''
-- Analysis: Data quality summary
-- This query provides an overview of data quality across models

select 
    'Data Quality Summary' as report_type,
    current_timestamp as generated_at,
    'Review null rates, duplicate counts, and other quality metrics' as description

-- Add specific data quality checks here based on your models
-- Example:
-- union all
-- select 
--     'null_rate_check' as report_type,
--     current_timestamp as generated_at,
--     concat('High null rate detected in ', column_name) as description
-- from your_quality_check_model
-- where null_rate > 0.1
'''.strip()
        
        return analyses
    
    def get_documentation_template(self, generation_result: ModelGenerationResult) -> str:
        """Get documentation template."""
        
        doc_content = f"""# dbt Model Documentation

Generated by Cartridge AI

## Generation Summary

- **Total Models**: {len(generation_result.models)}
- **AI Provider**: {generation_result.generation_metadata.get('ai_provider', 'Unknown')}
- **Model Used**: {generation_result.generation_metadata.get('model_used', 'Unknown')}

## Model Breakdown

"""
        
        # Group models by type
        model_groups = {}
        for model in generation_result.models:
            model_type = model.model_type.value
            if model_type not in model_groups:
                model_groups[model_type] = []
            model_groups[model_type].append(model)
        
        for model_type, models in model_groups.items():
            doc_content += f"### {model_type.title()} Models ({len(models)})\n\n"
            
            for model in models:
                doc_content += f"#### {model.name}\n\n"
                doc_content += f"**Description**: {model.description}\n\n"
                doc_content += f"**Materialization**: {model.materialization}\n\n"
                
                if model.dependencies:
                    doc_content += f"**Dependencies**: {', '.join(model.dependencies)}\n\n"
                
                if model.tags:
                    doc_content += f"**Tags**: {', '.join(model.tags)}\n\n"
                
                if model.columns:
                    doc_content += "**Columns**:\n\n"
                    for col in model.columns:
                        doc_content += f"- `{col['name']}`: {col.get('description', 'No description')}\n"
                    doc_content += "\n"
                
                if model.tests:
                    doc_content += f"**Tests**: {len(model.tests)} configured\n\n"
                
                doc_content += "---\n\n"
        
        # Add best practices section
        doc_content += """## dbt Best Practices

This project follows dbt best practices:

1. **Layered Architecture**: Models are organized into staging, intermediate, and mart layers
2. **Naming Conventions**: Models use consistent prefixes (stg_, int_, fct_, dim_)
3. **Documentation**: All models include descriptions and column documentation
4. **Testing**: Models include appropriate data quality tests
5. **Modularity**: Complex logic is broken into reusable components

## Maintenance

- Regularly review and update model documentation
- Monitor test results and data quality metrics
- Update models as source schema changes
- Consider performance optimization for large models

## Resources

- [dbt Documentation](https://docs.getdbt.com/)
- [dbt Style Guide](https://github.com/dbt-labs/corp/blob/main/dbt_style_guide.md)
- [dbt Best Practices](https://docs.getdbt.com/guides/best-practices)
"""
        
        return doc_content
    
    def get_project_yml_template(self, project_name: str) -> Dict[str, Any]:
        """Get dbt_project.yml template."""
        
        return {
            "name": project_name,
            "version": "1.0.0",
            "config-version": 2,
            "profile": project_name,
            "model-paths": ["models"],
            "analysis-paths": ["analysis"],
            "test-paths": ["tests"],
            "seed-paths": ["seeds"],
            "macro-paths": ["macros"],
            "snapshot-paths": ["snapshots"],
            "target-path": "target",
            "clean-targets": ["target", "dbt_packages", "logs"],
            "models": {
                project_name: {
                    "staging": {
                        "+materialized": "view",
                        "+tags": ["staging"]
                    },
                    "intermediate": {
                        "+materialized": "view", 
                        "+tags": ["intermediate"]
                    },
                    "marts": {
                        "+materialized": "table",
                        "+tags": ["marts"]
                    }
                }
            },
            "tests": {
                "+store_failures": True
            }
        }
    
    def get_gitignore_template(self) -> str:
        """Get .gitignore template."""
        
        return """
# dbt
target/
dbt_packages/
logs/
*.log

# OS
.DS_Store
Thumbs.db

# IDE
.vscode/
.idea/
*.swp
*.swo

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
.env
.venv

# Jupyter
.ipynb_checkpoints

# Local configuration
profiles.yml
""".strip()
    
    def get_packages_yml_template(self) -> Dict[str, Any]:
        """Get packages.yml template."""
        
        return {
            "packages": [
                {
                    "package": "dbt-labs/dbt_utils",
                    "version": [">=1.0.0", "<2.0.0"]
                },
                {
                    "package": "calogica/dbt_expectations", 
                    "version": [">=0.8.0", "<1.0.0"]
                },
                {
                    "package": "dbt-labs/codegen",
                    "version": [">=0.9.0", "<1.0.0"]
                }
            ]
        }
    
    def get_example_staging_model(self, table_name: str, schema: str, columns: List[str]) -> str:
        """Get example staging model template."""
        
        column_list = ",\n    ".join([f'"{col}"' for col in columns])
        
        return f'''
-- Staging model for {schema}.{table_name}
-- This model cleans and standardizes the raw data

select
    {column_list}
from {{{{ source('{schema}', '{table_name}') }}}}
'''.strip()
    
    def get_example_mart_model(self, model_name: str, source_models: List[str]) -> str:
        """Get example mart model template."""
        
        return f'''
-- Mart model: {model_name}
-- Business-ready analytical model

select
    *
from {{{{ ref('{source_models[0]}') }}}}

-- Add joins, aggregations, and business logic here
'''.strip()