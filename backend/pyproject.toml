[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cartridge"
version = "0.1.0"
description = "AI-powered dbt model generator that scans data sources and creates optimized dbt models"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
authors = [
    {name = "Cartridge Team", email = "team@cartridge.dev"},
]
keywords = ["dbt", "data-modeling", "ai", "sql", "analytics"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",

    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Database",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Database and ORM
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",  # PostgreSQL async driver
    "psycopg2-binary>=2.9.0",  # PostgreSQL sync driver
    "greenlet>=3.0.0",  # Required for SQLAlchemy async
    
    # Database connectors
    "pymysql>=1.1.0",  # MySQL
    "snowflake-connector-python>=3.6.0",  # Snowflake
    "google-cloud-bigquery>=3.13.0",  # BigQuery
    "redshift-connector>=2.0.0",  # Redshift
    
    # AI/ML
    "openai>=1.6.0",
    "anthropic>=0.8.0",
    "google-generativeai>=0.3.0",
    "langchain>=0.1.0",
    "langchain-openai>=0.0.5",
    "tiktoken>=0.5.0",
    
    # Data processing
    "pandas>=1.5.0,<2.1.0",
    "numpy>=1.24.0",
    "sqlparse>=0.4.0",
    
    # dbt integration
    "dbt-core>=1.7.0",
    "dbt-postgres>=1.7.0",
    "dbt-snowflake>=1.7.0",
    "dbt-bigquery>=1.7.0",
    "dbt-redshift>=1.7.0",
    
    # Task queue and caching
    "celery>=5.3.0",
    "redis>=5.0.0",
    
    # File handling and compression
    "jinja2>=3.1.0",
    "pyyaml>=6.0",
    
    # Utilities
    "click>=8.1.0",
    "rich>=13.7.0",
    "structlog>=23.2.0",
    "python-multipart>=0.0.6",  # For file uploads
    "httpx>=0.26.0",  # HTTP client
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.12.0",
    "isort>=5.13.0",
    "flake8>=6.1.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",
    "pytest-watch>=4.2.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.26.0",
    "psutil>=5.9.0",  # For performance tests
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/cartridge"
Documentation = "https://cartridge.readthedocs.io"
Repository = "https://github.com/yourusername/cartridge"
"Bug Tracker" = "https://github.com/yourusername/cartridge/issues"

[project.scripts]
cartridge = "cartridge.cli:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["cartridge*"]

[tool.setuptools.package-dir]
"" = "src"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["cartridge"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]